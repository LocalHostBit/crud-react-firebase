{"version":3,"sources":["components/Titulo.js","firebase.js","components/Form.js","components/Container.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Titulo","className","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Form","props","initialStateValues","id","name","handleInputChange","e","target","value","setTareas","tareas","useState","getTaskById","idd","a","collection","doc","get","data","useEffect","currentId","onSubmit","preventDefault","addOrEditLink","onChange","type","placeholder","Container","links","setLinks","setCurrentId","linkObject","set","toast","autoClose","update","console","log","deleteTask","window","confirm","delete","getTareas","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","Header","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.66805ea3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Titulo = () => {\n    return (\n        <>\n            <div className='container-2 shadow p-3 mb-5'>\n                <h3>Tareas Pendientes</h3>\n            </div>\n        </>\n    )\n}\n\nexport default Titulo\n","import firebase from 'firebase/app';\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCQ5U70Z8BBCMcqMldBPjwWmmRtnfQVTrg\",\n    authDomain: \"crud-react-5f109.firebaseapp.com\",\n    databaseURL: \"https://crud-react-5f109.firebaseio.com\",\n    projectId: \"crud-react-5f109\",\n    storageBucket: \"crud-react-5f109.appspot.com\",\n    messagingSenderId: \"882372226328\",\n    appId: \"1:882372226328:web:d325bfea4bdf4cb439426d\"\n  };\n  // Initialize Firebase\n  const fb = firebase.initializeApp(firebaseConfig);\n\n  export const db = fb.firestore();","import React, {useState, useEffect} from 'react'\nimport Titulo from './Titulo'\nimport { db } from '../firebase';\n\nconst Form = (props) => {\n/* 3. Guardar en una constante los datos y pasarlo como parametro useState */\n    const initialStateValues = {\n        id: '',\n        name: '',\n    };\n/* 4. Crear funcion para capturar lo que escribimos y pasarselo al input */\n    const handleInputChange = e => {\n        const {name, value} = e.target;\n        setTareas({...tareas, [name]: value})\n    };\n/* 2. Crear el useState*/\n\n    const [tareas, setTareas] = useState(initialStateValues);\n/* 1. Crear handleSubmit y ponerlo en el Form */\n    const handleSubmit = e => {\n        e.preventDefault();\n        /* 5. Desde containerjs viene esta funcion */\n        props.addOrEditLink(tareas);\n        setTareas({...initialStateValues});\n    }\n    const getTaskById = async (idd) => {\n        const doc = await db.collection('links').doc(idd).get();\n        setTareas({...doc.data() });\n    };\n\n    useEffect(() => {\n        if(props.currentId === '') {\n            setTareas({...initialStateValues});\n        } else {\n            getTaskById(props.currentId);\n        }\n    },[props.currentId]);\n    return (\n        <>\n        <form className='container container-form' onSubmit={handleSubmit}>\n            <div className='row p-4'>\n            <div className='form-inline'>\n                    <form className='form-inline mx-sm-3 mb-2'>\n                        <label className='sr-only'>Añadir Tarea</label>\n                        <input \n                            onChange={handleInputChange}\n                            value={tareas.name}\n                            type='text'\n                            className='form-control'\n                            name='name'\n                            placeholder=\"Añadir Tarea\">\n                        </input>\n                    </form>\n                </div>\n                <div className=\"form-inline mx-sm-3 mb-2\">\n                        <label className=\"sr-only\">Prioridad</label>\n                        <input \n                            onChange={handleInputChange}\n                            value={tareas.id}\n                            type='text'\n                            className='form-control'\n                            name='id'\n                            placeholder=\"Prioridad\">\n                        </input>\n                </div>\n                <button type=\"submit\" \n                        className=\"btn btn-success mb-2 \">{props.currentId === ''? 'Añadir' : 'Actualizar'}</button>\n            </div>\n        </form>\n        <Titulo />\n        </>\n    )\n}\n\nexport default Form\n","import React, {useEffect, useState} from 'react'\nimport Form from './Form'\nimport { db } from '../firebase'\nimport { toast } from 'react-toastify'\n\n\nconst Container = () => {\n\n    const [links, setLinks] = useState([]);\n\n    const [currentId, setCurrentId] = useState('');\n\n    const addOrEditLink = async (linkObject) => {\n        try {\n            if(currentId === '') {\n                await db.collection('links').doc().set(linkObject)\n                toast(' Tarea añadida! 🥰', {\n                type: 'success',\n                autoClose: 3000\n            });\n            } else {\n                await db.collection('links').doc(currentId).update(linkObject);\n                toast(' Tarea Modificada! 🧠', {\n                    type: 'info',\n                    autoClose: 3000\n                });\n                setCurrentId('');\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n    const deleteTask = async (idd) => {\n        if(\n            window.confirm('¿Estás seguro que quieres eliminar esta tarea? Deberías acabarla antes de eliminarla...')\n        )  {\n           await db.collection('links').doc(idd).delete();\n           toast(' Tarea eliminada 😱', {\n            type: 'warning',\n            autoClose: 2000\n        })\n        }\n    };\n\n    const getTareas = async () => {\n        db.collection('links').onSnapshot(\n           (querySnapshot) => {\n                const docs = [];\n                querySnapshot.forEach(doc => {\n                docs.push({...doc.data(), idd:doc.id});\n            });\n            setLinks(docs);\n       });\n    }\n\n    useEffect(() => {\n        getTareas();\n    },[]);\n\n    return (\n        <>\n        <div className='container'>\n            <div className='row-1 shadow-lg p-2 mb-3'>\n                <Form {...{addOrEditLink, currentId, links}}/>\n                <div className='col-md'>\n                    {links.map(link => {\n                        return <div className='card' key={link.id}>\n                                    <div className='row'>\n                                    <div className=\"col-auto\">\n                                    <ul className=\"list-group\">\n                                    <li className=\"list-group-item shadow-sm p-3 mb-2\">\n                                        <tr className=\"lead float-left\">\n                                            <td>\n                                            <span className=\"badge badge-dark m-2\">{link.id}</span> - {link.name}\n                                            </td>\n                                        </tr>\n                                    <div className='d-flex justify-content-between float-right'>\n                                        <button\n                                            className=\"btn btn-sm btn-warning\"\n                                            onClick={() => setCurrentId(link.idd)}\n                                            type='submit'\n                                            >Editar\n                                        </button>\n                                        <button className=\"btn btn-sm btn-danger mx-2\" onClick={() => deleteTask(link.idd)}\n                                            >Eliminar\n                                        </button> \n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                    })}\n            </div>\n            </div>\n        </div> \n        </>\n    )\n}\n\nexport default Container\n","import React from 'react'\n\nconst Header = () => {\n    return (\n        <>\n            <nav className=\"fondo-menu navbar navbar-light shadow-lg\">\n                <span className=\"navbar-brand mb-0 h1 text-black\">Task React.js</span>\n            </nav>\n        </>\n    )\n}\n\nexport default Header\n","import React, {useState} from 'react';\nimport styles from './assets/css/styles.css';\nimport Container from './components/Container';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './firebase';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}